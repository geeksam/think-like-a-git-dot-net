---
title: Resources
---

<h1>Resources</h1>

<h2>Software</h2>

<ul class="full-size">

  <li>
    <a href="https://github.com/rowanj/gitx">GitX</a>
    <div class="reading-note">
      Development on the original version of GitX stalled out years ago.  The most recent fork that I know about is the <strong>rowanj</strong> one, and that one appears to have been dormant since 2014.  There are a bunch of Git GUIs available these days; GitX fits my brain and continues to work, so I keep using it.  :)
    </div>
  </li>

  <li>
    <a href="http://jonas.nitro.dk/tig/">Tig: text-mode interface for git</a> by <a href="http://jonasfonseca.com/">Jonas Fonseca</a>
    <div class="reading-note">
      suggested by <a href="http://markscholtz.com/">Mark Scholtz</a>, this is a text-mode UI that gives you pretty (but still text-based) views of many of the same things that GitX does.  I personally don't have a lot of use for this, but for those of you who really really love your CLI (or your screen readers!), this might fit your working style a bit better.
    </div>
  </li>

</ul>

<h2>Free Stuff About Git</h2>

<ul class="full-size">
  <li>
    <a href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html">The Git Parable</a>, 2009 blog post by Tom&nbsp;Preston-Werner
    <div class="reading-note">
      Explains why you might want to use Git, and why it has some of the features it has.  At end, provides links to a few other resources that may be useful.
    </div>
  </li>

  <li>
    <a href="http://tomayko.com/writings/the-thing-about-git">The Thing About Git</a> 2008 blog post by Ryan&nbsp;Tomayko
    <div class="reading-note">
      One of the best pieces I've ever read about Git.  Explains a lot, especially what the index is.
    </div>
  </li>

  <li>
    <a href="http://gitimmersion.com/">Git Immersion</a> by EdgeCase Consulting
    <div class="reading-note">
      This one was suggested by reader <a href="http://markscholtz.com/">Mark Scholtz</a>.  I haven't gone through it myself, but at first glance this looks like an amazingly detailed, well supported step-by-step tutorial that starts from the very basics and goes on through some very advanced topics.  Thanks, Mark!
    </div>
  </li>

  <li>
    <a href="https://trailhead.salesforce.com/en/content/learn/modules/git-and-git-hub-basics">Git and GitHub Basics</a> at SalesForce's Trailhead
    <div class="reading-note">
      Another reader suggestion, this one from <a href="https://www.mikearthur.net/">Mike Arthur</a>.
    </div>
  </li>

  <li>
    <a href="http://nfarina.com/post/9868516270/git-is-simpler">Git is Simpler Than You Think</a>, 2011 blog post by Nick&nbsp;Farina
    <div class="reading-note">
      Chatty blog post with lots of entertaining pictures.  You'll hardly notice you're learning stuff.
    </div>
  </li>

  <li>
    <a href="http://programblings.com/2008/06/07/the-illustrated-guide-to-recovering-lost-commits-with-git/">The Illustrated Guide to Recovering Lost Commits With Git</a>, 2008 blog post by Mathieu Martin
    <div class="reading-note">
      Sometimes the best way to learn how to fix something is to break it on purpose.  Arlo Belshee once told me that when he joins a new team, he likes to force them into a failure mode as quickly as he can, just so he can build trust in their collective ability to recover from it.  In that spirit, Mathieu walks you through "losing" work in Git, and then shows you how to get it back again.  Great stuff.
    </div>
  </li>

  <li>
    <a href="http://johnwilger.com/2011/01/08/production-release-workflow-with-git.html">Production Release Workflow With Git</a>, a blog post by John&nbsp;Wilger
    <div class="reading-note">
      In January 2011, my manager wrote up this description of the rebase-oriented workflow we'd been using on our team for (then) several months.  We've since discovered some subtle problems with this approach and are moving toward a <a href="http://continuousdelivery.com/">continuous delivery</a> setup.  While <strong>I do not recommend this workflow now,</strong> it's an interesting example of how rewrites to shared history (generally considered extremely disruptive) can work quite well as long as the entire team expects them and has the skills to cope with issues when they arise (which is not as often as you might think).
    </div>
  </li>
</ul>

<h2>Stuff About Git You Used To Have To Pay For</h2>

<ul class="full-size">
  <li>
    <a href="https://github.com/pluralsight/git-internals-pdf">Git Internals PDF</a> by Scott&nbsp;Chacon (also $12 via Peepcode)
    <div class="reading-note">
      More detail than you could ever possibly want on how Git works.  I've read maybe half of it.  It's incredible.
    </div>
  </li>
</ul>

<h2>Graph Theory Awesomeness</h2>

<ul class="full-size">
  <li>
    <a href="http://www.jamisbuck.org/presentations/rubyconf2011/index.html">"Algorithm" is not a !@%#$@ 4-Letter Word</a>, RubyConf 2011 slides by Jamis&nbsp;Buck
    <div class="reading-note">
      Won't teach you a thing about Git&mdash;or will it?  Either way, if you're not 5 IQ points smarter by the end, I'll personally refund your purchase price.
    </div>
  </li>
</ul>
